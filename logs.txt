Here you will find out the different procedures I used in this course also the problems I faced:
- Installed all the required stuff like npm, node and mongoDB
- We have to run an application in the VM.
- Used GCP and hosted the application there
- I tried to change the port from 80 to 8080 
- also made reverse proxy just for fun and match port:8080 to 80

Exercise 2.
-Problems with the deployment method with the 1st exercise
a) OS Dependent: Different deployment procedure and requirements for different OS.
b) Not-Scalable: Run on ore Laptops or VMs
c) Not-Portable: Running the same procedure from starting again on the new machine. Time consuming

Containerization(container based virtualization)

It is an OS-level virtualization method for deploying and running distributed applications without launching an entire VM for each application.
It share the same OS kernel as host.



<<<<<<< HEAD

--------------------------------------------------------------------------------------------------------
Exercise 3
Building the microservices

Here we are deploying the 3 microservices:
- product-price
- product-description
- book-name

Instead of a database we just created a MockData.json file which contains all the records, and we have to find the details of those records.

The idea is if a user will give a product id then we have to return the product name, price and url.

Steps for deploying the application in GCP.
METHOD 1:
If you have arm64 based machine like linux distribution.
- run the application in the local.
- push the images to the docker hub using the command docker push name_of_image
- just copy the docker-compose.yml file to the VM on GCP
- and now run the 'docker-compose up', what it will do is it will pull the images form the docker hub and then run the application
* if you changed the code then do 'docker-compose up --build'
 
METHOD 2:
If you have amd64 based machine like mac m1
- now for this ther are again 2 option
1st option: 
do as you did above but while building the images use buildx command so that it will build the images for amd64

2nd option :
push the entire application code to the VM on GCP and then run the docker-compose up command it will build it, here in this it will not pull the images from the docker hub because we are building the images here itself.

You can follow this option in linux also if you want to avoid the docker hub thing













=======
MICROSERVICES
---------------
Splitting the big monolithic application into samll services which can be developled, deployed and maintain by a person or small team.

It has it's own advantages and disadvantages in comparision to the monolithic structure of an applicaion.
***docker-entrypoint.sh: exec format error***
While running the application in the cloud using docker-compose.yml file I faecd this error, after digging in it I found this technique in the internet which works for me, that is since I am using mac m1 chip which is ARM compatible and there for the image which was created by that is not supported by google cloud. Therefore I used the command called "buildx" and setting the expected platform which was:
{docker buildx build --platform linux/amd64 -t image_name .}  (dot is for the path)

Steps for running the containerised app:
1. Adding a new api in the server.js 
2. Create the dockerFile (refer the dockerFile)
3. Creating docker hub account and fill out the docker-compose file(already filled just need to change some part)
4. Building and pushing the image in the docker hub
  commands for building an image
    $ docker --version (for checking the version of docker)
    $ docker images (for checking the list of docker images)
    $ docker login (for log in docker)
    $ docker build -t cloudcomputinggroup250:latest ./server (for building an image here -t is for tag and then image name with tag and then the path)
    $ docker buildx build --platform linux/amd64 -t cloudcomputinggroup250:lts ./server (for building the image this is specifically for the linux based    
      system, I used this buildx because I was facing issue with the image build in m1 chip)
    $ docker image rm -f image-id (for removing an image)
    $ docker tag image-name:tag new-image-name:tag (for changing the name of the image)
    $ docker run -d image-id sleep infinity(for running the container which is instance of an image, here d is for detach mode)
    $ docker-compose up (for running the docker-composed.yml file)
    $ docker-compose down (for closing the docker-composed.yml file)
    $ docker push abhishekkarki/cloudcomputinggroup250:lts (for pushing the image in docker hub where abhishekkarki is dockerid and cloudcomputinggroup250
      is image name and lts is the tag)
5. Start VM in GCP, install docker and docker-compose on it
6. pull application image on it using the docker-compose file
7. After that run the application using the docker-compose up, remember to remove the build line from docker-compose.yml
    for rebuilding and rerunning the command is docker-compose up --build
8. If you want to check that all the services are running or not check it using command docker ps, there are 2 different container running one for the 
    cloudcomputinggroup and another is mongodb
9. Enable docker remote api
    Modify the line that starts with ExecStart to look like this
    ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:4243 
    Where the addition is -H tcp://0.0.0.0:4243
    Run systemctl daemon-reload
    Run sudo service docker restart
    Test that the Docker API is accessible curl http://YOUR_VM_PUBLIC_IP:4243/version
10. enable port 3000 and 4243
additional -> you can add specific ip like submission server IP address 131.159.35.171 in source Ip ranges, but in order to access the application from different browser or everywhere add IP as 0.0.0.0/0
>>>>>>> dd87a93d2cf4ac6c8ada3a9e41918ccf18e4f3ca

